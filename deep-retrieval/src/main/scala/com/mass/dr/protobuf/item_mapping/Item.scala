// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.mass.dr.protobuf.item_mapping

@SerialVersionUID(0L)
final case class Item(
    item: _root_.scala.Int = 0,
    id: _root_.scala.Int = 0,
    paths: _root_.scala.Seq[com.mass.dr.protobuf.item_mapping.Path] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Item] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = item
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      paths.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = item
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = id
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      paths.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withItem(__v: _root_.scala.Int): Item = copy(item = __v)
    def withId(__v: _root_.scala.Int): Item = copy(id = __v)
    def clearPaths = copy(paths = _root_.scala.Seq.empty)
    def addPaths(__vs: com.mass.dr.protobuf.item_mapping.Path*): Item = addAllPaths(__vs)
    def addAllPaths(__vs: Iterable[com.mass.dr.protobuf.item_mapping.Path]): Item = copy(paths = paths ++ __vs)
    def withPaths(__v: _root_.scala.Seq[com.mass.dr.protobuf.item_mapping.Path]): Item = copy(paths = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = item
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 3 => paths
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(item)
        case 2 => _root_.scalapb.descriptors.PInt(id)
        case 3 => _root_.scalapb.descriptors.PRepeated(paths.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.mass.dr.protobuf.item_mapping.Item
    // @@protoc_insertion_point(GeneratedMessage[com.mass.dr.protobuf.Item])
}

object Item extends scalapb.GeneratedMessageCompanion[com.mass.dr.protobuf.item_mapping.Item] with scalapb.HasBuilder[com.mass.dr.protobuf.item_mapping.Item] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.mass.dr.protobuf.item_mapping.Item] with scalapb.HasBuilder[com.mass.dr.protobuf.item_mapping.Item] = this
  def merge(`_message__`: com.mass.dr.protobuf.item_mapping.Item, `_input__`: _root_.com.google.protobuf.CodedInputStream): com.mass.dr.protobuf.item_mapping.Item = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.mass.dr.protobuf.item_mapping.Item] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.mass.dr.protobuf.item_mapping.Item(
        item = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        paths = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[com.mass.dr.protobuf.item_mapping.Path]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ItemMappingProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ItemMappingProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = com.mass.dr.protobuf.item_mapping.Path
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.mass.dr.protobuf.item_mapping.Item(
    item = 0,
    id = 0,
    paths = _root_.scala.Seq.empty
  )
  final class Builder private (
    private var __item: _root_.scala.Int,
    private var __id: _root_.scala.Int,
    private val __paths: _root_.scala.collection.immutable.VectorBuilder[com.mass.dr.protobuf.item_mapping.Path],
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[com.mass.dr.protobuf.item_mapping.Item] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __item = _input__.readInt32()
          case 16 =>
            __id = _input__.readInt32()
          case 26 =>
            __paths += _root_.scalapb.LiteParser.readMessage[com.mass.dr.protobuf.item_mapping.Path](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): com.mass.dr.protobuf.item_mapping.Item = {
      com.mass.dr.protobuf.item_mapping.Item(
        item = __item,
        id = __id,
        paths = __paths.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[com.mass.dr.protobuf.item_mapping.Item, com.mass.dr.protobuf.item_mapping.Item.Builder] {
    def apply(): Builder = new Builder(
      __item = 0,
      __id = 0,
      __paths = new _root_.scala.collection.immutable.VectorBuilder[com.mass.dr.protobuf.item_mapping.Path],
      `_unknownFields__` = null
    )
    def apply(`_message__`: com.mass.dr.protobuf.item_mapping.Item): Builder = new Builder(
        __item = _message__.item,
        __id = _message__.id,
        __paths = new _root_.scala.collection.immutable.VectorBuilder[com.mass.dr.protobuf.item_mapping.Path] ++= _message__.paths,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = com.mass.dr.protobuf.item_mapping.Item.Builder()
  def newBuilder(`_message__`: com.mass.dr.protobuf.item_mapping.Item): Builder = com.mass.dr.protobuf.item_mapping.Item.Builder(_message__)
  implicit class ItemLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.mass.dr.protobuf.item_mapping.Item]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.mass.dr.protobuf.item_mapping.Item](_l) {
    def item: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.item)((c_, f_) => c_.copy(item = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def paths: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.mass.dr.protobuf.item_mapping.Path]] = field(_.paths)((c_, f_) => c_.copy(paths = f_))
  }
  final val ITEM_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val PATHS_FIELD_NUMBER = 3
  def of(
    item: _root_.scala.Int,
    id: _root_.scala.Int,
    paths: _root_.scala.Seq[com.mass.dr.protobuf.item_mapping.Path]
  ): _root_.com.mass.dr.protobuf.item_mapping.Item = _root_.com.mass.dr.protobuf.item_mapping.Item(
    item,
    id,
    paths
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.mass.dr.protobuf.Item])
}
